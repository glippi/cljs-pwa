{"version":3,"sources":["starter/bmi.cljs"],"mappings":";AAGA,uBAAA,+BAAAA,tDAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAA+CO;aAA/C,AAAAL,4CAAAF,eAAA,pEAAwBI;aAAxB,AAAAF,4CAAAF,eAAA,pEAA+BK;UAA/B,AAAAH,4CAAAF,eAAA,jEAAsCM;AAAtC,AACE,IAAME,IAAE,UAAA,TAAGJ;AAAX,AACE,GAAI,QAAA,PAAME;AACR,0DAAA,nDAACG,8CAAMF,wDAAU,CAAGF,SAAO,CAAGG,IAAEA;;AAChC,0DAAA,nDAACC,8CAAMF,+DAAa,CAAA,CAAGD,MAAIE,KAAEA;;;AAEnC,AAAKE,uBAAS,AAACC,gDAAO,qBAAA,2CAAA,yDAAA,MAAA,0DAAA,zLAACR;AAEvB,qBAAA,rBAAMS,kDAAQC,MAAMC,MAAMC,IAAIC,IAAIC;AAAlC,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,QAAA,4DAAA,sDAAA,qDAAA,uDAAA,2CAAA,uDAAA,eAAA,zRACgCH,wDAAWC,qDAASC,2OAE9B,WAAKE;AAAL,AACE,IAAMC,YAAU,AAACC,SAAY,AAAA,AAAIF;AAAjC,AACE,OAACG,mDAAMX,qBACA,WAAKH;AAAL,AACE,yHAAIA,9CACA,AAACE,mDAAMI,MAAMM,xGACb,AAACG,mHAAOL,xIACRd;;;;AAEvC,4BAAA,5BAAMoB;AAAN,AACE,IAAAC,aAAA,AAAAC,gBAAmCf;IAAnCc,iBAAA,AAAAvB,4BAAAuB;aAAA,AAAAtB,4CAAAsB,eAAA,pEAAcnB;aAAd,AAAAH,4CAAAsB,eAAA,pEAAqBpB;UAArB,AAAAF,4CAAAsB,eAAA,jEAA4BlB;IAA5BoB,aACuB,gBAAA,mFAAA,SAAA,sBAAA,gBAAA,mFAAA,UAAA,iBAAA,gBAAA,mFAAA,SAAA,qBAAA,AAAA,mFAAA,MAAA,xdACE,OAAA,NAAGpB,iIACH,OAAA,NAAGA,6HACH,OAAA,NAAGA;;YAJ5B,AAAAqB,4CAAAD,WAAA,IAAA,nEACOE;eADP,AAAAD,4CAAAD,WAAA,IAAA,tEACaG;AADb,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,yBAAA,mFAAA,mDAAA,0BAAA,KAAA,sGAAA,gEAAA,MAAA,MAAA,mEAAA,mFAAA,mDAAA,0BAAA,KAAA,sGAAA,iEAAA,KAAA,MAAA,mEAAA,mFAAA,mDAAA,oBAAA,IAAA,mFAAA,qDAAA,2CAAA,uDAAA,2CAAA,8FAAA,sGAAA,uDAAA,KAAA,KAAA,31CASe,UAAA,TAAKzB,sGACfQ,4EAAeR,uOAEL,UAAA,TAAKC,sGACfO,6EAAeP,mOAER,OAAA,NAAKC,2VACUsB,sBAAQC,oGAC9BjB,sEAAYN","names":["p__11926","map__11927","cljs.core/--destructure-map","cljs.core.get","starter.bmi/calc-bmi","height","weight","bmi","data","h","cljs.core.assoc","starter.bmi/bmi-data","reagent.core.atom","starter.bmi/slider","param","value","min","max","invalidates","e","new-value","js/parseInt","cljs.core.swap_BANG_","cljs.core.dissoc","starter.bmi/bmi-component","map__11931","cljs.core/deref","vec__11932","cljs.core.nth","color","diagnose"],"sourcesContent":["(ns starter.bmi\n  (:require [reagent.core :as r]))\n\n(defn calc-bmi [{:keys [height weight bmi] :as data}]\n  (let [h (/ height 100)]\n    (if (nil? bmi)\n      (assoc data :bmi (/ weight (* h h)))\n      (assoc data :weight (* bmi h h)))))\n\n(def bmi-data (r/atom (calc-bmi {:height 180 :weight 80})))\n\n(defn slider [param value min max invalidates]\n  [:input {:type \"range\" :value value :min min :max max\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (js/parseInt (.. e -target -value))]\n                          (swap! bmi-data\n                                 (fn [data]\n                                   (-> data\n                                       (assoc param new-value)\n                                       (dissoc invalidates)\n                                       calc-bmi)))))}])\n\n(defn bmi-component []\n  (let [{:keys [weight height bmi]} @bmi-data\n        [color diagnose] (cond\n                           (< bmi 18.5) [\"orange\" \"underweight\"]\n                           (< bmi 25) [\"inherit\" \"normal\"]\n                           (< bmi 30) [\"orange\" \"overweight\"]\n                           :else [\"red\" \"obese\"])]\n    [:div\n     [:h3 \"BMI calculator\"]\n     [:div\n      \"Height: \" (int height) \"cm\"\n      [slider :height height 100 220 :bmi]]\n     [:div\n      \"Weight: \" (int weight) \"kg\"\n      [slider :weight weight 30 150 :bmi]]\n     [:div\n      \"BMI: \" (int bmi) \" \"\n      [:span {:style {:color color}} diagnose]\n      [slider :bmi bmi 10 50 :weight]]]))\n"]}